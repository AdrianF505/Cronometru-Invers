// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2024 09:29:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CRONOMETRUINVERS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CRONOMETRUINVERS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Frecventa;
reg Incrementaremin;
reg incrementaresec;
reg incrementarezecimin;
reg reset;
reg set;
reg Start/Stop;
reg tact;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire ds0;
wire ds1;
wire ds2;
wire ds3;
wire E;
wire F;
wire G;
wire I0;
wire I1;
wire I2;
wire I3;
wire I4;
wire m0;
wire m1;
wire m2;
wire m3;
wire s0;
wire s1;
wire s2;
wire s3;
wire zm0;
wire zm1;
wire zm2;
wire zs0;
wire zs1;
wire zs2;

// assign statements (if any)                          
CRONOMETRUINVERS i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.ds0(ds0),
	.ds1(ds1),
	.ds2(ds2),
	.ds3(ds3),
	.E(E),
	.F(F),
	.Frecventa(Frecventa),
	.G(G),
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.I4(I4),
	.Incrementaremin(Incrementaremin),
	.incrementaresec(incrementaresec),
	.incrementarezecimin(incrementarezecimin),
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.reset(reset),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.set(set),
	.\Start/Stop (Start/Stop),
	.tact(tact),
	.zm0(zm0),
	.zm1(zm1),
	.zm2(zm2),
	.zs0(zs0),
	.zs1(zs1),
	.zs2(zs2)
);
initial 
begin 
#10000000 $finish;
end 

// Incrementaremin
initial
begin
	Incrementaremin = 1'b0;
end 

// incrementaresec
initial
begin
	incrementaresec = 1'b0;
end 

// incrementarezecimin
initial
begin
	incrementarezecimin = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// set
initial
begin
	set = 1'b0;
	set = #10000 1'b1;
end 

// Start/Stop
initial
begin
	Start/Stop = 1'b1;
end 

// tact
initial
begin
	tact = 1'b0;
	tact = #5020 1'b1;
	# 5000;
	repeat(998)
	begin
		tact = 1'b0;
		tact = #5000 1'b1;
		# 5000;
	end
	tact = 1'b0;
	tact = #5000 1'b1;
end 

// Frecventa
always
begin
	Frecventa = 1'b0;
	Frecventa = #5000 1'b1;
	#5000;
end 
endmodule

